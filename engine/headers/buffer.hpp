/*
 * MIT License
 *
 * Copyright (c) 2024 Giovanni Santini

 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

#pragma once

#include <glad/glad.h> /* OpenGL driver */

namespace Brenta
{

namespace Types
{

/**
 * @brief Buffer wrapper around OpenGL buffer objects
 *
 * This class is a wrapper around OpenGL buffer objects. It provides a simple
 * interface to create, bind, unbind and delete buffer objects. It also provides
 * methods to copy data to the buffer objects.
 *
 * This class offers methods to:
 * - create and delete buffer object
 * - bind and unbind buffer object
 * - copy data to the buffer object
 */
class Buffer
{
  public:
    /**
     * @brief Buffer object id, generated by OpenGL
     */
    unsigned int id;
    /**
     * @brief Buffer object target (like GL_ARRAY_BUFFER,
     *        GL_ELEMENT_ARRAY_BUFFER...)
     */
    GLenum target;

    /**
     * @brief Default constructor, does nothing
     */
    Buffer()
    {
    }
    /**
     * @brief Constructor that creates a buffer object
     * @param target Buffer object target
     *
     * This constructor creates a buffer object with the specified target.
     * It calls the OpenGL function glGenBuffers to generate a buffer object
     * id and glBindBuffer to bind the buffer object.
     * The buffer has a default destructor that deletes the buffer object
     * when it goes out of scope.
     */
    Buffer(GLenum input_target);

    /**
     * @brief Bind the buffer object
     *
     * Buffers must be bound before they can be used!
     */
    void Bind();
    /**
     * @brief Unbind the buffer object
     */
    void Unbind();
    /**
     * @brief Delete the buffer object
     */
    void Delete();

    /* Getters */

    /**
     * @brief Get the buffer object id
     * @return Buffer object id
     */
    int GetId();
    /**
     * @brief Get the buffer object target
     * @return Buffer object target
     */
    GLenum GetTarget();

    /* Setters */

    /**
     * @brief Set the buffer object id
     * @param id Buffer object id
     */
    void SetId(unsigned int id);
    /**
     * @brief Set the buffer object target
     * @param target Buffer object target
     */
    void SetTarget(GLenum target);

    /* Utilities */

    /**
     * @brief Copy data to the buffer object
     * @param size Size of the data in bytes
     * @param data Pointer to the data
     * @param usage OpenGL usage hint (like GL_STATIC_DRAW)
     *
     * This method copies data to the buffer object. The size of the data
     * is specified in bytes, the data is a pointer to the data and the usage
     * is an OpenGL usage hint.
     */
    void CopyData(GLsizeiptr size, const void *data, GLenum usage);
    /**
     * @brief Copy data to the buffer object
     * @param size Size of the data in bytes
     * @param data Pointer to the data
     * @param usage OpenGL usage hint (like GL_STATIC_DRAW)
     *
     * Same as Copydata but for target GL_ARRAY_BUFFER. The naming is
     * more specific to the use case.
     */
    void CopyVertices(GLsizeiptr size, const void *data, GLenum usage);
    /**
     * @brief Copy data to the buffer object
     * @param size Size of the data in bytes
     * @param data Pointer to the data
     * @param usage OpenGL usage hint (like GL_STATIC_DRAW)
     *
     * Same as CopyVertices but for target GL_ELEMENT_ARRAY_BUFFER.
     */
    void CopyIndices(GLsizeiptr size, const void *data, GLenum usage);
};

} // namespace Types

} // namespace Brenta
