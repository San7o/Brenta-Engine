cmake_minimum_required(VERSION 3.29.2)
project("Brenta Engine")

find_library(asound asound REQUIRED)
find_library(freetype freetype REQUIRED)
find_library(harfbuzz harfbuzz REQUIRED)
find_library(assimp assimp PATHS ${CMAKE_SOURCE_DIR}/lib REQUIRED)
find_library(glfw glfw REQUIRED)
find_library(GL GL REQUIRED)
find_library(dl dl REQUIRED)
find_library(m m REQUIRED)
find_library(pthread pthread REQUIRED)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Harfbuzz causes problems when linking
set (CMAKE_DISABLE_FIND_PACKAGE_HarfBuzz TRUE)

set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED True)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

link_directories(lib)
link_libraries(asound glfw GL dl m stdc++fs assimp freetype harfbuzz SDL3 asound)

option(BUILD_IMGUI "Build with ImGui" ON)
option(BUILD_MAIN "Build main" ON)
option(BUILD_TESTS "Build unit tests" OFF)
option(BUILD_EXAMPLES "Build examples" OFF)
option(BUILD_ECS "Build with ECS" ON)

file(GLOB IMGUI_SOURCES "imgui/*.cpp" "imgui/backends/imgui_impl_glfw.cpp" "imgui/misc/cpp/imgui_stdlib.cpp" "imgui/backends/imgui_impl_opengl3.cpp" )
file(GLOB ENGINE_SOURCES "engine/sources/*.c" "engine/sources/*.cpp" "utils/sources/*.cpp")
file(GLOB ECS_SOURCES "ecs/sources/*.cpp")
file(GLOB TEST_SOURCES "tests/**/*.cpp" "tests/*.cpp")
file(GLOB MAIN_SOURCES "game/sources/**/*.cpp" "game/sources/*.cpp" )

if (BUILD_MAIN AND NOT BUILD_TESTS AND NOT BUILD_EXAMPLES)
    include_directories(include game/headers engine/headers ecs/headers utils/headers imgui imgui/backends imgui/misc/cpp )
    if (BUILD_IMGUI)
        add_compile_definitions(USE_IMGUI)
    endif()
    if (BUILD_ECS)
        add_compile_definitions(USE_ECS)
        add_executable(main ${ENGINE_SOURCES} ${ECS_SOURCES} ${MAIN_SOURCES} ${IMGUI_SOURCES})
    else()
            add_executable(main ${ENGINE_SOURCES} ${MAIN_SOURCES} ${IMGUI_SOURCES} ${IMGUI_SOURCES} )
    endif()
    target_compile_options(main PRIVATE -Wall)
endif()

if (BUILD_TESTS)
    include_directories(include tests/headers game/headers engine/headers ecs/headers utils/headers )
    add_executable(tests ${TEST_SOURCES} ${ENGINE_SOURCES} ${ECS_SOURCES})
    target_compile_options(tests PRIVATE -Wall)
endif()

if (BUILD_EXAMPLES)
    include_directories(include engine/headers utils/headers )
    add_executable(simple_screen ${ENGINE_SOURCES} "examples/simple_screen.cpp")
    add_executable(load_opengl ${ENGINE_SOURCES} "examples/load_opengl.cpp")
    add_executable(load_model ${ENGINE_SOURCES} "examples/load_model.cpp")
    add_executable(ecs ${ENGINE_SOURCES} ${ECS_SOURCES} "examples/ecs.cpp")
    target_compile_options(ecs PRIVATE -DUSE_ECS)
    target_include_directories(ecs PRIVATE ecs/headers )
    add_executable(particles ${ENGINE_SOURCES} "examples/particles.cpp")
    add_executable(audio ${ENGINE_SOURCES} "examples/audio.cpp")
    add_executable(text ${ENGINE_SOURCES} "examples/text.cpp")
endif()
